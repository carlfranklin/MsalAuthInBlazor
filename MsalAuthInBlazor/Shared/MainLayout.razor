@inherits LayoutComponentBase
@inject IPCAWrapper _pcaWrapper;
@inject IConfiguration _configuration;

<PageTitle>Msal Auth In Blazor</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            @if (IsLoggedIn)
            {
                <button class="btn btn-link" @onclick="OnLogoutClicked">Logout</button>
            }
            else
            {
                <button class="btn btn-link" @onclick="OnLoginClicked">Login</button>
            }
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>


@code {
    private List<WeatherForecast> weatherForecast = new();

    bool _isLoggedIn = false;
    public bool IsLoggedIn
    {
        get => _isLoggedIn;
        set
        {
            if (_isLoggedIn == value) return;
            _isLoggedIn = value;
            InvokeAsync(StateHasChanged);
        }
    }

    private async void OnLoginClicked()
    {
        try
        {
            // Attempt silent login, and obtain access token.
            var result = await _pcaWrapper.AcquireTokenSilentAsync(_pcaWrapper.Scopes).ConfigureAwait(false);

            // Set access token.
            Globals.AccessToken = result?.AccessToken;
        }
        // A MsalUiRequiredException will be thrown, if this is the first attempt to login, or after logging out.
        catch (MsalUiRequiredException)
        {
            try
            {
                // Perform interactive login, and obtain access token.
                var result = await _pcaWrapper.AcquireTokenInteractiveAsync(_pcaWrapper?.Scopes).ConfigureAwait(false);

                // Set access token.
                Globals.AccessToken = result?.AccessToken;
            }
            catch (Exception ex)
            {
                // Ignore.
            }
        }
        catch (Exception ex)
        {
            IsLoggedIn = false;
        }

        IsLoggedIn = true;
    }

    private async void OnLogoutClicked()
    {
        await _pcaWrapper.SignOutAsync().ConfigureAwait(false);
        IsLoggedIn = false;
        Globals.AccessToken = null;
    }
}